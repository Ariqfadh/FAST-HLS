<pragmas>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<33, true>::ap_int_base<32, true>(ap_int_base<32, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<8, false>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="515" pragmaType="inline" parentfunction="_ZN8ssdm_intILi33ELb1EEC2EDq33_i" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="read" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<33, true>::ap_int_base<11, false>(ap_int_base<11, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<33, true>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int<33>::ap_int<33, true>(ap_int_base<33, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="checkOverflowBaseC" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="checkOverflowCsim" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="checkOverflowBaseC" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<4, false>::operator++(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<4, false>& ap_int_base<4, false>::operator+=<1, false>(ap_int_base<1, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="checkOverflowCsim" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="checkOverflowBaseC" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="523" pragmaType="inline" parentfunction="_ZN8ssdm_intILi1ELb0EEC2EDq1_j" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<8, false>::RType<8, false>::plus operator+<8, false, 8, false>(ap_int_base<8, false> const&, ap_int_base<8, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<9, true>::ap_int_base<8, false>(ap_int_base<8, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<4, false>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<9, true>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<9, false>::ap_int_base<8, false>(ap_int_base<8, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="523" pragmaType="inline" parentfunction="_ZN8ssdm_intILi4ELb0EEC2EDq4_j" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int<9>::ap_int<9, true>(ap_int_base<9, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<8, false>::ap_int_base<9, false>(ap_int_base<9, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="515" pragmaType="inline" parentfunction="ssdm_int<32, true>::ssdm_int(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<9, false>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<11, false>::operator unsigned long long() const" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="523" pragmaType="inline" parentfunction="_ZN8ssdm_intILi9ELb0EEC2EDq9_j" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<11, false>::RType<32, true>::minus operator-<11, false, 32, true>(ap_int_base<11, false> const&, ap_int_base<32, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool ap_int_base<32, true>::operator<<33, true>(ap_int_base<33, true> const&) const" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool ap_int_base<8, false>::operator<<8, false>(ap_int_base<8, false> const&) const" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool ap_int_base<4, false>::operator>=<32, true>(ap_int_base<32, true> const&) const" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool operator>=<4, false>(ap_int_base<4, false> const&, int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<8>::ap_uint<9>(ap_int<9> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool ap_int_base<8, false>::operator><8, false>(ap_int_base<8, false> const&) const" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<8, false>::ap_int_base<9, true>(ap_int_base<9, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<8, false>::RType<8, false>::minus operator-<8, false, 8, false>(ap_int_base<8, false> const&, ap_int_base<8, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="write" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<11, false>::RType<($_0)32, true>::minus operator-<11, false>(ap_int_base<11, false> const&, int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="read" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<8>::ap_uint(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<11>::ap_uint(int)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="523" pragmaType="inline" parentfunction="ssdm_int<8, false>::ssdm_int(unsigned char)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<1, false>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="515" pragmaType="inline" parentfunction="_ZN8ssdm_intILi9ELb1EEC2EDq9_i" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<9>::ap_uint<9, false>(ap_int_base<9, false> const&)" off="0" region="0" recursive="0"/>
<pragma file="fast_keypoint_detection.cpp" line="36" pragmaType="pipeline" parentfunction="fast_keypoint_detection" off="0" ii="1" rewind="0" style=""/>
<pragma file="fast_keypoint_detection.cpp" line="42" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="54" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="64" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="80" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="107" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="117" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="56" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="119" pragmaType="unroll" parentfunction="fast_keypoint_detection" factor="-1" skip_exit_check="0"/>
<pragma file="fast_keypoint_detection.cpp" line="9" pragmaType="interface" parentfunction="fast_keypoint_detection" mode="axis" port="input_stream" register="1" register_mode="both" name="" depth="-1"/>
<pragma file="fast_keypoint_detection.cpp" line="10" pragmaType="interface" parentfunction="fast_keypoint_detection" mode="axis" port="keypoint_stream" register="1" register_mode="both" name="" depth="-1"/>
<pragma file="fast_keypoint_detection.cpp" line="11" pragmaType="interface" parentfunction="fast_keypoint_detection" mode="s_axilite" port="height" bundle="control" offset="-1" name="" clock="" impl="" register="0"/>
<pragma file="fast_keypoint_detection.cpp" line="12" pragmaType="interface" parentfunction="fast_keypoint_detection" mode="s_axilite" port="width" bundle="control" offset="-1" name="" clock="" impl="" register="0"/>
<pragma file="fast_keypoint_detection.cpp" line="13" pragmaType="interface" parentfunction="fast_keypoint_detection" mode="ap_ctrl_hs" port="return" name=""/>
<pragma file="fast_keypoint_detection.cpp" line="18" pragmaType="array_partition" parentfunction="fast_keypoint_detection" dim="1" factor="0" mode="complete" dynamic="0" variable="_ZZ23fast_keypoint_detectionRN3hls6streamI7ap_uintILi8EELi0EEERNS0_I8KeypointLi0EEES1_ILi11EES8_E11line_buffer"/>
<pragma file="fast_keypoint_detection.cpp" line="19" pragmaType="bind_storage" parentfunction="fast_keypoint_detection" op="666" impl="22" latency="-1" variable="_ZZ23fast_keypoint_detectionRN3hls6streamI7ap_uintILi8EELi0EEERNS0_I8KeypointLi0EEES1_ILi11EES8_E11line_buffer"/>
<pragma file="fast_keypoint_detection.cpp" line="22" pragmaType="array_partition" parentfunction="fast_keypoint_detection" dim="0" factor="0" mode="complete" dynamic="0" variable="window"/>
<pragma file="fast_keypoint_detection.cpp" line="25" pragmaType="array_partition" parentfunction="fast_keypoint_detection" dim="0" factor="0" mode="complete" dynamic="0" variable="score_buffer"/>
<pragma file="fast_keypoint_detection.cpp" line="37" pragmaType="dependence" parentfunction="fast_keypoint_detection" class="" direction="NODIR" type="inter" distance="0" variable="_ZZ23fast_keypoint_detectionRN3hls6streamI7ap_uintILi8EELi0EEERNS0_I8KeypointLi0EEES1_ILi11EES8_E11line_buffer"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="bool operator<<33, true>(int, ap_int_base<33, true> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<8>::ap_uint<9>(ap_uint<9> const&)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<32, true>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<4>::ap_uint(int)" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_int_base<11, false>::ap_int_base(int)" off="0" region="0" recursive="0"/>
<pragma file="C:/Xilinx/Vitis/2024.2/common/technology/autopilot\etc/ap_common.h" line="523" pragmaType="inline" parentfunction="_ZN8ssdm_intILi11ELb0EEC2EDq11_j" off="0" region="0" recursive="0"/>
<pragma file="" line="0" pragmaType="inline" parentfunction="ap_uint<4>::ap_uint<4, false>(ap_int_base<4, false> const&)" off="0" region="0" recursive="0"/>
</pragmas>
